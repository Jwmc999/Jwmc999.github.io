I"Œ1<h1 id="array">Array</h1>
<ul>
  <li>A data structure consisting of a collection of <em><strong>values</strong></em></li>
  <li>Each identified by array <em><strong>index</strong></em>
    <ul>
      <li>In C/C++/Java programming languages, array index begins from 0.</li>
      <li>The range of array index is [0, size -1].
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">score</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="c1">//Data type Array name [Array size];</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>In C/C++ programming language,
    <ul>
      <li>A consecutive set of memory location</li>
      <li>Logical order is the same as the physical order</li>
      <li>Creation of an array
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Type</span> <span class="n">d</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="n">Type</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Type</span><span class="p">[</span><span class="n">size</span><span class="p">];</span><span class="c1">//Dynamically assign the size of the array. 1) Declare the type and d as pointers 2) Use "new" operator</span>
<span class="c1">// We can assign the size of the array according to the specific number</span>
</code></pre></div>        </div>
      </li>
      <li>Accessing an element by array index
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
      <li>Release the allocated
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">delete</span> <span class="p">[]</span> <span class="n">d</span><span class="p">;</span>
</code></pre></div>        </div>
        <h2 id="creation-of-arrays-in-c-programming-language">Creation of Arrays in C++ Programming Language</h2>
        <h3 id="1-dimmensional-array">1-dimmensional array</h3>
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</code></pre></div>        </div>
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</code></pre></div>        </div>
        <h3 id="2-dimensional-array">2-dimensional array</h3>
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">4</span><span class="p">];</span>
</code></pre></div>        </div>
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">**</span> <span class="n">a</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="o">*</span> <span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</code></pre></div>        </div>
        <h2 id="array-in-memory">Array in Memory</h2>
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">score</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">52</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">61</span><span class="p">};</span>
<span class="c1">// When we declare an array, each value gets stored sequentially in the actual RAM.</span>
</code></pre></div>        </div>
        <h4 id="example">Example</h4>
        <p>```c
#include <cstdio></cstdio></p>
      </li>
    </ul>
  </li>
</ul>

<p>int matrix[6][6];</p>

<p>for(int row = 0; row&lt;6; row++)
{
  for(int col = 0; col &lt;6; col++)
  {
    if(row&lt;col)
      matrix[row][col] = 1;
    else if(row==col)
      matrix[row][col] = 0;
    else
      matrix[row][col] = -1;
  }
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------------------------------
# Pointer
- A variable storing a _**memory address**_
  - Represent the variable with 3 axes: name, value, address of memory
```c
int n = 3; //If you put *, it becomes the pointer data type.
int* pn = &amp;n; //pointer called pn. Initialize the variable pn with the address of n.
// the value of pn becomes the address of n
// *pn is an integer
</code></pre></div></div>
<h2 id="-ampersand-operator">&amp; (Ampersand) Operator</h2>
<ul>
  <li>Reference operator
    <ul>
      <li>Returns the address of a variable.
```c
#include <cstdio></cstdio></li>
    </ul>
  </li>
</ul>

<p>int main()
{
  char c = ‚ÄòA‚Äô;
  char* pc = &amp;c;// pointer pc points the location of</p>

<p>printf(‚Äú%c %p\n‚Äù, c, pc);
  printf(‚Äú%p %p\n‚Äù, &amp;c, &amp;pc);
  printf(‚Äú%d %d\n‚Äù, sizeof(c), sizeof(pc));//size of character, size of pointer</p>

<p>return 0;
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## * (Asterisk) Operator
- Deference operator
  - Returns the value at the pointer address.
  - In other words, if you put * to the pointer, you can access the value of the variable that the pointer is pointing.
```c
#include &lt;cstdio&gt;

int main()
{
  char c = 'A';
  char* pc = &amp;c;// a pointer pc is pointing to a variable c
  //If you put * to the pointer pc, it (*pc) prints the value of variable c.

  printf("%c %c\n", c *pc);// A A

  *pc = 'C';// If you declare 'C' to the *pc,
  //You can change the value of variable c
  //directly through the pointer (pc) that is pointing to the variable c
  printf("%c %c\n", c, *pc);// C C

  return 0;
}
</code></pre></div></div>
<p>answer:
A A
C C</p>
<h4 id="example-what-are-the-results">Example: What are the results?</h4>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cstdio&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
  <span class="kt">int</span><span class="o">*</span> <span class="n">pa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">pc</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>

  <span class="o">*</span><span class="n">pa</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
  <span class="o">*</span><span class="n">pc</span> <span class="o">=</span> <span class="o">*</span><span class="n">pa</span> <span class="o">+</span> <span class="o">*</span><span class="n">pb</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%d %d %d"</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>answer: 10 20 30</p>
<h2 id="function-call-with-pointers">Function Call with Pointers</h2>
<ul>
  <li>Two types of passing augments to a function:
    <ul>
      <li>Call by value: passing values. Cannot change the value.</li>
      <li>Call by reference: passing addresses (pointers). Can change the value of the variable.
 ```c
 #include <cstdio></cstdio></li>
    </ul>
  </li>
</ul>

<p>void swap1(int x, int y);//Call by value
 void swap2(int* px, int* py);//Call by reference</p>

<p>int main()
 {
  int a = 5, b = 7;
  swap1(a, b);// swap1 cannot change the value of a and b in the main function.
  printf(‚Äú%d %d\n‚Äù, a, b);// 5 7
  swap2(&amp;a, &amp;b);// *px == a, *py == b. Change the addresses of a and b.
  // swap2 can change the value of a and b. a == *py, b == *px.
  printf(‚Äú%d %d\n‚Äù, a, b);// 7 5
  return 0;
 }</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```c
void swap1(int x, int y)
{
  int temp = x;
  x = y;
  y = temp;
}
</code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">swap2</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">px</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">py</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">px</span><span class="p">;</span>
  <span class="o">*</span><span class="n">px</span> <span class="o">=</span> <span class="o">*</span><span class="n">py</span><span class="p">;</span>
  <span class="o">*</span><span class="n">py</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="insertion-and-deletion-in-arrays">Insertion and Deletion in Arrays</h2>
<ul>
  <li>Insertion and deletion can require significant number of operations in arrays.
    <h3 id="linked-lists">Linked Lists</h3>
  </li>
  <li>A linear collection of data elements</li>
  <li>Order is not given by their physical placement in memory.</li>
  <li>Each element points to the next.</li>
  <li>Each node consists of an <strong>item</strong> and a <strong>link</strong> (hook)
    <h3 id="inserting--deleting-an-element-into-a-linked-list">Inserting &amp; Deleting an Element into a Linked List</h3>
  </li>
  <li>Works
    <h3 id="linked-list-implementation">Linked List Implementation</h3>
  </li>
  <li>A node consists of an item and a next pointer</li>
  <li>A linked list has its length and a pointer to the head node.
```c
typedef int Data;</li>
</ul>

<p>typedef struct _Node
{
  Data item;
  struct _Node* next;
} Node;</p>

<p>typedef struct
{
  Node* head;
  int len;
} LinkedList;
```</p>
<h2 id="arrow-and-box-representation">Arrow and Box Representation</h2>
<ul>
  <li>Box: an item</li>
  <li>Arrow: a pointer to the next box
    <ul>
      <li>If the arrow points nothing, it is called the NULL pointer.</li>
    </ul>
  </li>
  <li>The head points the fist node.</li>
</ul>

<p><strong>source</strong>
‚ÄúK-MOOC ÌóàÏû¨ÌïÑ ÍµêÏàòÎãòÏùò &lt;Ïù∏Í≥µÏßÄÎä•ÏùÑ ÏúÑÌïú ÏïåÍ≥†Î¶¨Ï¶òÍ≥º ÏûêÎ£åÍµ¨Ï°∞: Ïù¥Î°†, ÏΩîÎî©, Í∑∏Î¶¨Í≥† Ïª¥Ìì®ÌåÖ ÏÇ¨Í≥†&gt;
Í∞ïÏ¢åÏùò 2-1 Í∞ïÏ¢åÏùò Î∞∞Ïó¥Í≥º Î¶¨Ïä§Ìä∏ Ï§ë(http://www.kmooc.kr/courses/course-v1:SKKUk+SKKU_46+2020_T1)‚Äù</p>

<p><a href="/Lc1/Summary02/">back</a>
<a href="/Lc2/Summary02/">next</a></p>
:ET